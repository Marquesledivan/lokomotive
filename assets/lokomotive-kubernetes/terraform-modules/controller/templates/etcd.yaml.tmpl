systemd:
  units:
  - name: etcd-member.service
    enable: true
    dropins:
    - name: 40-etcd-cluster.conf
      contents: |
        [Service]
        Environment="ETCD_IMAGE_TAG=v3.4.7"
        Environment="ETCD_IMAGE_URL=docker://quay.io/coreos/etcd"
        Environment="RKT_RUN_ARGS=--insecure-options=image"
        Environment="ETCD_NAME=${etcd_name}"
        Environment="ETCD_ADVERTISE_CLIENT_URLS=https://${etcd_domain}:2379"
        Environment="ETCD_INITIAL_ADVERTISE_PEER_URLS=https://${etcd_domain}:2380"
        Environment="ETCD_LISTEN_CLIENT_URLS=https://0.0.0.0:2379"
        Environment="ETCD_LISTEN_PEER_URLS=https://0.0.0.0:2380"
        Environment="ETCD_LISTEN_METRICS_URLS=http://0.0.0.0:2381"
        Environment="ETCD_INITIAL_CLUSTER=${etcd_initial_cluster}"
        Environment="ETCD_STRICT_RECONFIG_CHECK=true"
        Environment="ETCD_SSL_DIR=/etc/ssl/etcd"
        Environment="ETCD_TRUSTED_CA_FILE=/etc/ssl/certs/etcd/server-ca.crt"
        Environment="ETCD_CERT_FILE=/etc/ssl/certs/etcd/server.crt"
        Environment="ETCD_KEY_FILE=/etc/ssl/certs/etcd/server.key"
        Environment="ETCD_CLIENT_CERT_AUTH=true"
        Environment="ETCD_PEER_TRUSTED_CA_FILE=/etc/ssl/certs/etcd/peer-ca.crt"
        Environment="ETCD_PEER_CERT_FILE=/etc/ssl/certs/etcd/peer.crt"
        Environment="ETCD_PEER_KEY_FILE=/etc/ssl/certs/etcd/peer.key"
        Environment="ETCD_PEER_CLIENT_CERT_AUTH=true"
        ExecStopPost=-/opt/etcd-rejoin
        [Unit]
        Requires=wait-for-dns.service
storage:
  files:
  - path: /opt/etcd-rejoin
    filesystem: root
    mode: 0555
    contents:
      inline: |
        #!/bin/bash
        set -eou pipefail
        # Rejoin a cluster as fresh node when etcd cannot join
        # (e.g., after repovisioning, crashing or node being down).
        # Set ExecStopPost=-/opt/etcd-rejoin to run when etcd failed and
        # use env vars of etcd-member.service.
        # Skip if not provisioned
        if [ ! -d "/etc/ssl/etcd/" ]; then exit 0; fi
        # or got stopped.
        if [ "$EXIT_CODE" = "killed" ]; then exit 0; fi
        now=$(date +%s)
        if [ -f /var/lib/etcd-last-fail ]; then
          last=$(cat /var/lib/etcd-last-fail)
        else
          last=0
        fi
        echo "$now" > /var/lib/etcd-last-fail
        let "d = $now - $last"
        # Skip and restart regularly if it does not fail within 120s.
        if [ "$d" -gt 120 ]; then exit 0; fi
        export ETCDCTL_API=3
        urls=$(echo "$ETCD_INITIAL_CLUSTER" | tr "," "\n" | cut -d "=" -f 2 | tr "\n" "," | head -c -1)
        # $$ for terraform
        endpoints="$${urls//2380/2379}"
        ARGS="--cacert=/etc/ssl/etcd/etcd-client-ca.crt --cert=/etc/ssl/etcd/etcd-client.crt --key=/etc/ssl/etcd/etcd-client.key --endpoints=$endpoints"
        # Check if unhealthy (should be because etcd is not running)
        unhealty=$((etcdctl endpoint health $ARGS 2> /dev/stdout | grep "is unhealthy" | grep "$ETCD_NAME") || true)
        if [ -z "$unhealty" ]; then exit 0; fi
        # Remove old ID if still exists
        ID=$((etcdctl member list $ARGS | grep "$ETCD_NAME" | cut -d "," -f 1) || true)
        if [ ! -z "$ID" ]; then
          etcdctl member remove "$ID" $ARGS
        fi
        # Re-add as new member
        etcdctl member add "$ETCD_NAME" --peer-urls="$ETCD_INITIAL_ADVERTISE_PEER_URLS" $ARGS
        # Join fresh without state
        mv /var/lib/etcd "/var/lib/etcd-bkp-$(date +%s)" || true
        if [ -z "$(grep ETCD_INITIAL_CLUSTER_STATE=existing /etc/systemd/system/etcd-member.service.d/40-etcd-cluster.conf)" ]; then
          echo 'Environment="ETCD_INITIAL_CLUSTER_STATE=existing"' >> /etc/systemd/system/etcd-member.service.d/40-etcd-cluster.conf
          # Apply change
          systemctl daemon-reload
        fi
        # Restart unit (yes, within itself)
        systemctl restart etcd-member &
